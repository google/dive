/*
 Copyright 2020 Google LLC

 Licensed under the Apache License, Version 2.0 (the \"License\";
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code has been generated automatically by generateSOAs.py. Do not hand-modify this code.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include "dive_core/event_state.h"


#include "py_common.h"

using namespace pybind11::literals;

namespace Dive {
void py_event_state(py::module &m) {
    py::class_<EventStateInfo>(m, "EventStateInfo")
        .def("topology", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.TopologyPtr()));
        })
            .def("prim_restart_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.PrimRestartEnabledPtr()));
        })
            .def("patch_control_points", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.PatchControlPointsPtr()));
        })
            .def("viewport", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkViewport>::type>({ self.size(), 16},         {
                sizeof(numpy_type<VkViewport>::type)* 16, sizeof(numpy_type<VkViewport>::type)* 16}
    , reinterpret_cast<const numpy_type<VkViewport>::type*>(self.ViewportPtr()));
        })
            .def("scissor", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkRect2D>::type>({ self.size(), 16},         {
                sizeof(numpy_type<VkRect2D>::type)* 16, sizeof(numpy_type<VkRect2D>::type)* 16}
    , reinterpret_cast<const numpy_type<VkRect2D>::type*>(self.ScissorPtr()));
        })
            .def("depth_clamp_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthClampEnabledPtr()));
        })
            .def("rasterizer_discard_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.RasterizerDiscardEnabledPtr()));
        })
            .def("polygon_mode", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkPolygonMode>::type>({ self.size()},         {
                sizeof(numpy_type<VkPolygonMode>::type)}
    , reinterpret_cast<const numpy_type<VkPolygonMode>::type*>(self.PolygonModePtr()));
        })
            .def("cull_mode", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkCullModeFlags>::type>({ self.size()},         {
                sizeof(numpy_type<VkCullModeFlags>::type)}
    , reinterpret_cast<const numpy_type<VkCullModeFlags>::type*>(self.CullModePtr()));
        })
            .def("front_face", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkFrontFace>::type>({ self.size()},         {
                sizeof(numpy_type<VkFrontFace>::type)}
    , reinterpret_cast<const numpy_type<VkFrontFace>::type*>(self.FrontFacePtr()));
        })
            .def("depth_bias_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthBiasEnabledPtr()));
        })
            .def("depth_bias_constant_factor", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasConstantFactorPtr()));
        })
            .def("depth_bias_clamp", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasClampPtr()));
        })
            .def("depth_bias_slope_factor", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasSlopeFactorPtr()));
        })
            .def("line_width", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.LineWidthPtr()));
        })
            .def("rasterization_samples", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkSampleCountFlagBits>::type>({ self.size()},         {
                sizeof(numpy_type<VkSampleCountFlagBits>::type)}
    , reinterpret_cast<const numpy_type<VkSampleCountFlagBits>::type*>(self.RasterizationSamplesPtr()));
        })
            .def("sample_shading_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.SampleShadingEnabledPtr()));
        })
            .def("min_sample_shading", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MinSampleShadingPtr()));
        })
            .def("sample_mask", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkSampleMask>::type>({ self.size()},         {
                sizeof(numpy_type<VkSampleMask>::type)}
    , reinterpret_cast<const numpy_type<VkSampleMask>::type*>(self.SampleMaskPtr()));
        })
            .def("alpha_to_coverage_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.AlphaToCoverageEnabledPtr()));
        })
            .def("depth_test_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthTestEnabledPtr()));
        })
            .def("depth_write_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthWriteEnabledPtr()));
        })
            .def("depth_compare_op", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkCompareOp>::type>({ self.size()},         {
                sizeof(numpy_type<VkCompareOp>::type)}
    , reinterpret_cast<const numpy_type<VkCompareOp>::type*>(self.DepthCompareOpPtr()));
        })
            .def("depth_bounds_test_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthBoundsTestEnabledPtr()));
        })
            .def("min_depth_bounds", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MinDepthBoundsPtr()));
        })
            .def("max_depth_bounds", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MaxDepthBoundsPtr()));
        })
            .def("stencil_test_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.StencilTestEnabledPtr()));
        })
            .def("stencil_op_state_front", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkStencilOpState>::type>({ self.size()},         {
                sizeof(numpy_type<VkStencilOpState>::type)}
    , reinterpret_cast<const numpy_type<VkStencilOpState>::type*>(self.StencilOpStateFrontPtr()));
        })
            .def("stencil_op_state_back", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkStencilOpState>::type>({ self.size()},         {
                sizeof(numpy_type<VkStencilOpState>::type)}
    , reinterpret_cast<const numpy_type<VkStencilOpState>::type*>(self.StencilOpStateBackPtr()));
        })
            .def("logic_op_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size(), 8},         {
                sizeof(numpy_type<bool>::type)* 8, sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LogicOpEnabledPtr()));
        })
            .def("logic_op", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkLogicOp>::type>({ self.size(), 8},         {
                sizeof(numpy_type<VkLogicOp>::type)* 8, sizeof(numpy_type<VkLogicOp>::type)* 8}
    , reinterpret_cast<const numpy_type<VkLogicOp>::type*>(self.LogicOpPtr()));
        })
            .def("attachment", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<VkPipelineColorBlendAttachmentState>::type>({ self.size(), 8},         {
                sizeof(numpy_type<VkPipelineColorBlendAttachmentState>::type)* 8, sizeof(numpy_type<VkPipelineColorBlendAttachmentState>::type)* 8}
    , reinterpret_cast<const numpy_type<VkPipelineColorBlendAttachmentState>::type*>(self.AttachmentPtr()));
        })
            .def("blend_constant", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<float>::type>({ self.size(), 4},         {
                sizeof(numpy_type<float>::type)* 4, sizeof(numpy_type<float>::type)* 4}
    , reinterpret_cast<const numpy_type<float>::type*>(self.BlendConstantPtr()));
        })
            .def("lrz_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZEnabledPtr()));
        })
            .def("lrz_write", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZWritePtr()));
        })
            .def("lrz_dir_status", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<a6xx_lrz_dir_status>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_lrz_dir_status>::type)}
    , reinterpret_cast<const numpy_type<a6xx_lrz_dir_status>::type*>(self.LRZDirStatusPtr()));
        })
            .def("lrz_dir_write", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZDirWritePtr()));
        })
            .def("z_test_mode", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<a6xx_ztest_mode>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_ztest_mode>::type)}
    , reinterpret_cast<const numpy_type<a6xx_ztest_mode>::type*>(self.ZTestModePtr()));
        })
            .def("bin_w", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.BinWPtr()));
        })
            .def("bin_h", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.BinHPtr()));
        })
            .def("render_mode", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<a6xx_render_mode>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_render_mode>::type)}
    , reinterpret_cast<const numpy_type<a6xx_render_mode>::type*>(self.RenderModePtr()));
        })
            .def("buffers_location", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<a6xx_buffers_location>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_buffers_location>::type)}
    , reinterpret_cast<const numpy_type<a6xx_buffers_location>::type*>(self.BuffersLocationPtr()));
        })
            .def("thread_size", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<a6xx_threadsize>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_threadsize>::type)}
    , reinterpret_cast<const numpy_type<a6xx_threadsize>::type*>(self.ThreadSizePtr()));
        })
            .def("enable_all_helper_lanes", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.EnableAllHelperLanesPtr()));
        })
            .def("enable_partial_helper_lanes", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.EnablePartialHelperLanesPtr()));
        })
            .def("ubwc_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size(), 8},         {
                sizeof(numpy_type<bool>::type)* 8, sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCEnabledPtr()));
        })
            .def("ubwc_lossless_enabled", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size(), 8},         {
                sizeof(numpy_type<bool>::type)* 8, sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCLosslessEnabledPtr()));
        })
            .def("ubwc_enabled_on_ds", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCEnabledOnDSPtr()));
        })
            .def("ubwc_lossless_enabled_on_ds", [](const EventStateInfo &self) {
            return py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCLosslessEnabledOnDSPtr()));
        })
        .def("to_dataframe", [](const EventStateInfo &self) {
        py::object DataFrame = py::module::import("pandas").attr("DataFrame");
        py::dict dict;
                        dict["topology"] = py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.TopologyPtr()));
                                dict["prim_restart_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.PrimRestartEnabledPtr()));
                                dict["patch_control_points"] = py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.PatchControlPointsPtr()));
                                    for(uint32_t viewport=0; viewport<16; ++viewport)
                {
                    std::ostringstream key;
                    key << "viewport"<< "_" <<  viewport;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<VkViewport>::type>({ self.size()},         {
                sizeof(numpy_type<VkViewport>::type)* 16}
    , reinterpret_cast<const numpy_type<VkViewport>::type*>(self.ViewportPtr(EventStateId(0), viewport)));
                }
                                    for(uint32_t scissor=0; scissor<16; ++scissor)
                {
                    std::ostringstream key;
                    key << "scissor"<< "_" <<  scissor;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<VkRect2D>::type>({ self.size()},         {
                sizeof(numpy_type<VkRect2D>::type)* 16}
    , reinterpret_cast<const numpy_type<VkRect2D>::type*>(self.ScissorPtr(EventStateId(0), scissor)));
                }
                                dict["depth_clamp_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthClampEnabledPtr()));
                                dict["rasterizer_discard_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.RasterizerDiscardEnabledPtr()));
                                dict["polygon_mode"] = py::array_t<numpy_type<VkPolygonMode>::type>({ self.size()},         {
                sizeof(numpy_type<VkPolygonMode>::type)}
    , reinterpret_cast<const numpy_type<VkPolygonMode>::type*>(self.PolygonModePtr()));
                                dict["cull_mode"] = py::array_t<numpy_type<VkCullModeFlags>::type>({ self.size()},         {
                sizeof(numpy_type<VkCullModeFlags>::type)}
    , reinterpret_cast<const numpy_type<VkCullModeFlags>::type*>(self.CullModePtr()));
                                dict["front_face"] = py::array_t<numpy_type<VkFrontFace>::type>({ self.size()},         {
                sizeof(numpy_type<VkFrontFace>::type)}
    , reinterpret_cast<const numpy_type<VkFrontFace>::type*>(self.FrontFacePtr()));
                                dict["depth_bias_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthBiasEnabledPtr()));
                                dict["depth_bias_constant_factor"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasConstantFactorPtr()));
                                dict["depth_bias_clamp"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasClampPtr()));
                                dict["depth_bias_slope_factor"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.DepthBiasSlopeFactorPtr()));
                                dict["line_width"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.LineWidthPtr()));
                                dict["rasterization_samples"] = py::array_t<numpy_type<VkSampleCountFlagBits>::type>({ self.size()},         {
                sizeof(numpy_type<VkSampleCountFlagBits>::type)}
    , reinterpret_cast<const numpy_type<VkSampleCountFlagBits>::type*>(self.RasterizationSamplesPtr()));
                                dict["sample_shading_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.SampleShadingEnabledPtr()));
                                dict["min_sample_shading"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MinSampleShadingPtr()));
                                dict["sample_mask"] = py::array_t<numpy_type<VkSampleMask>::type>({ self.size()},         {
                sizeof(numpy_type<VkSampleMask>::type)}
    , reinterpret_cast<const numpy_type<VkSampleMask>::type*>(self.SampleMaskPtr()));
                                dict["alpha_to_coverage_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.AlphaToCoverageEnabledPtr()));
                                dict["depth_test_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthTestEnabledPtr()));
                                dict["depth_write_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthWriteEnabledPtr()));
                                dict["depth_compare_op"] = py::array_t<numpy_type<VkCompareOp>::type>({ self.size()},         {
                sizeof(numpy_type<VkCompareOp>::type)}
    , reinterpret_cast<const numpy_type<VkCompareOp>::type*>(self.DepthCompareOpPtr()));
                                dict["depth_bounds_test_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.DepthBoundsTestEnabledPtr()));
                                dict["min_depth_bounds"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MinDepthBoundsPtr()));
                                dict["max_depth_bounds"] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)}
    , reinterpret_cast<const numpy_type<float>::type*>(self.MaxDepthBoundsPtr()));
                                dict["stencil_test_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.StencilTestEnabledPtr()));
                                dict["stencil_op_state_front"] = py::array_t<numpy_type<VkStencilOpState>::type>({ self.size()},         {
                sizeof(numpy_type<VkStencilOpState>::type)}
    , reinterpret_cast<const numpy_type<VkStencilOpState>::type*>(self.StencilOpStateFrontPtr()));
                                dict["stencil_op_state_back"] = py::array_t<numpy_type<VkStencilOpState>::type>({ self.size()},         {
                sizeof(numpy_type<VkStencilOpState>::type)}
    , reinterpret_cast<const numpy_type<VkStencilOpState>::type*>(self.StencilOpStateBackPtr()));
                                    for(uint32_t attachment=0; attachment<8; ++attachment)
                {
                    std::ostringstream key;
                    key << "logic_op_enabled"<< "_" <<  attachment;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LogicOpEnabledPtr(EventStateId(0), attachment)));
                }
                                    for(uint32_t attachment=0; attachment<8; ++attachment)
                {
                    std::ostringstream key;
                    key << "logic_op"<< "_" <<  attachment;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<VkLogicOp>::type>({ self.size()},         {
                sizeof(numpy_type<VkLogicOp>::type)* 8}
    , reinterpret_cast<const numpy_type<VkLogicOp>::type*>(self.LogicOpPtr(EventStateId(0), attachment)));
                }
                                    for(uint32_t attachment=0; attachment<8; ++attachment)
                {
                    std::ostringstream key;
                    key << "attachment"<< "_" <<  attachment;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<VkPipelineColorBlendAttachmentState>::type>({ self.size()},         {
                sizeof(numpy_type<VkPipelineColorBlendAttachmentState>::type)* 8}
    , reinterpret_cast<const numpy_type<VkPipelineColorBlendAttachmentState>::type*>(self.AttachmentPtr(EventStateId(0), attachment)));
                }
                                    for(uint32_t channel=0; channel<4; ++channel)
                {
                    std::ostringstream key;
                    key << "blend_constant"<< "_" <<  channel;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<float>::type>({ self.size()},         {
                sizeof(numpy_type<float>::type)* 4}
    , reinterpret_cast<const numpy_type<float>::type*>(self.BlendConstantPtr(EventStateId(0), channel)));
                }
                                dict["lrz_enabled"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZEnabledPtr()));
                                dict["lrz_write"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZWritePtr()));
                                dict["lrz_dir_status"] = py::array_t<numpy_type<a6xx_lrz_dir_status>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_lrz_dir_status>::type)}
    , reinterpret_cast<const numpy_type<a6xx_lrz_dir_status>::type*>(self.LRZDirStatusPtr()));
                                dict["lrz_dir_write"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.LRZDirWritePtr()));
                                dict["z_test_mode"] = py::array_t<numpy_type<a6xx_ztest_mode>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_ztest_mode>::type)}
    , reinterpret_cast<const numpy_type<a6xx_ztest_mode>::type*>(self.ZTestModePtr()));
                                dict["bin_w"] = py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.BinWPtr()));
                                dict["bin_h"] = py::array_t<numpy_type<uint32_t>::type>({ self.size()},         {
                sizeof(numpy_type<uint32_t>::type)}
    , reinterpret_cast<const numpy_type<uint32_t>::type*>(self.BinHPtr()));
                                dict["render_mode"] = py::array_t<numpy_type<a6xx_render_mode>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_render_mode>::type)}
    , reinterpret_cast<const numpy_type<a6xx_render_mode>::type*>(self.RenderModePtr()));
                                dict["buffers_location"] = py::array_t<numpy_type<a6xx_buffers_location>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_buffers_location>::type)}
    , reinterpret_cast<const numpy_type<a6xx_buffers_location>::type*>(self.BuffersLocationPtr()));
                                dict["thread_size"] = py::array_t<numpy_type<a6xx_threadsize>::type>({ self.size()},         {
                sizeof(numpy_type<a6xx_threadsize>::type)}
    , reinterpret_cast<const numpy_type<a6xx_threadsize>::type*>(self.ThreadSizePtr()));
                                dict["enable_all_helper_lanes"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.EnableAllHelperLanesPtr()));
                                dict["enable_partial_helper_lanes"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.EnablePartialHelperLanesPtr()));
                                    for(uint32_t attachment=0; attachment<8; ++attachment)
                {
                    std::ostringstream key;
                    key << "ubwc_enabled"<< "_" <<  attachment;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCEnabledPtr(EventStateId(0), attachment)));
                }
                                    for(uint32_t attachment=0; attachment<8; ++attachment)
                {
                    std::ostringstream key;
                    key << "ubwc_lossless_enabled"<< "_" <<  attachment;
                    dict[py::cast(key.str())] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)* 8}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCLosslessEnabledPtr(EventStateId(0), attachment)));
                }
                                dict["ubwc_enabled_on_ds"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCEnabledOnDSPtr()));
                                dict["ubwc_lossless_enabled_on_ds"] = py::array_t<numpy_type<bool>::type>({ self.size()},         {
                sizeof(numpy_type<bool>::type)}
    , reinterpret_cast<const numpy_type<bool>::type*>(self.UBWCLosslessEnabledOnDSPtr()));
                return DataFrame(dict);
    });

}
} // namespace Dive
