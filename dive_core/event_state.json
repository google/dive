{
    "header": {
        "path": "dive_core/event_state.h",
        "includes": [
            "adreno.h",
            "common.h",
            "dive_core/common/gpudefs.h",
            "info_id.h",
            "struct_of_arrays.h",
            "third_party/Vulkan-Headers/include/vulkan/vulkan.h"
        ],
        "options": [
            "isSet",
            "descriptions"
        ]
    },
    "src": {
        "path": "dive_core/event_state.cpp",
        "sys_includes": [
            "cstring"
        ],
        "includes": [
            "event_state.h"
        ]
    },
    "natvis": {
        "path": "dive_core/event_state.natvis"
    },
    "py_wrapper": {
        "path": "pydive/py_event_statecpp",
        "func": "py_event_state",
        "includes": [
            "dive_core/event_state.h"
        ]
    },
    "namespace": "Dive",
    "soa_types": [
        {
            "name": "EventStateInfo",
            "id_name": "EventStateId",
            "desc": "State info for events (draw/dispatch/sync/dma)",
            "fields": [
                {
                    "name": "Topology",
                    "ty": "VkPrimitiveTopology",
                    "storage_ty": "uint32_t",
                    "category": "Input Assembly",
                    "desc": "The primitive topology for this event"
                },
                {
                    "name": "PrimRestartEnabled",
                    "ty": "bool",
                    "category": "Input Assembly",
                    "desc": "Controls whether a special vertex index value is treated as restarting the assembly of primitives"
                },
                {
                    "name": "PatchControlPoints",
                    "ty": "uint32_t",
                    "category": "Tessellation",
                    "desc": "Number of control points per patch"
                },
                {
                    "name": "Viewport",
                    "ty": "VkViewport",
                    "category": "Viewport",
                    "desc": "Defines the viewport transforms",
                    "array_dims": [
                        {
                            "name": "viewport",
                            "count": "16"
                        }
                    ]
                },
                {
                    "name": "Scissor",
                    "ty": "VkRect2D",
                    "category": "Viewport",
                    "desc": "Defines the rectangular bounds of the scissor for the corresponding viewport",
                    "array_dims": [
                        {
                            "name": "scissor",
                            "count": "16"
                        }
                    ]
                },
                {
                    "name": "DepthClampEnabled",
                    "ty": "bool",
                    "category": "Rasterizer",
                    "desc": "Controls whether to clamp the fragment’s depth values"
                },
                {
                    "name": "RasterizerDiscardEnabled",
                    "ty": "bool",
                    "category": "Rasterizer",
                    "desc": "Controls whether primitives are discarded immediately before the rasterization stage"
                },
                {
                    "name": "PolygonMode",
                    "ty": "VkPolygonMode",
                    "category": "Rasterizer",
                    "desc": "The triangle rendering mode"
                },
                {
                    "name": "CullMode",
                    "ty": "VkCullModeFlags",
                    "category": "Rasterizer",
                    "desc": "The triangle facing direction used for primitive culling"
                },
                {
                    "name": "FrontFace",
                    "ty": "VkFrontFace",
                    "category": "Rasterizer",
                    "desc": "A VkFrontFace value specifying the front-facing triangle orientation to be used for culling"
                },
                {
                    "name": "DepthBiasEnabled",
                    "ty": "bool",
                    "category": "Rasterizer",
                    "desc": "Whether to bias fragment depth values"
                },
                {
                    "name": "DepthBiasConstantFactor",
                    "ty": "float",
                    "category": "Rasterizer",
                    "desc": "A scalar factor controlling the constant depth value added to each fragment."
                },
                {
                    "name": "DepthBiasClamp",
                    "ty": "float",
                    "category": "Rasterizer",
                    "desc": "The maximum (or minimum) depth bias of a fragment"
                },
                {
                    "name": "DepthBiasSlopeFactor",
                    "ty": "float",
                    "category": "Rasterizer",
                    "desc": "A scalar factor applied to a fragment’s slope in depth bias calculations"
                },
                {
                    "name": "LineWidth",
                    "ty": "float",
                    "category": "Rasterizer",
                    "desc": "The width of rasterized line segments"
                },
                {
                    "name": "RasterizationSamples",
                    "ty": "VkSampleCountFlagBits",
                    "category": "Msaa",
                    "desc": "A VkSampleCountFlagBits value specifying the number of samples used in rasterization"
                },
                {
                    "name": "SampleShadingEnabled",
                    "ty": "bool",
                    "category": "Msaa",
                    "desc": "Whether sample shading is enabled"
                },
                {
                    "name": "MinSampleShading",
                    "ty": "float",
                    "category": "Msaa",
                    "desc": "Specifies a minimum fraction of sample shading if SampleShadingEnable is set to VK_TRUE"
                },
                {
                    "name": "SampleMask",
                    "ty": "VkSampleMask",
                    "category": "Msaa",
                    "desc": "Each bit in the sample mask is associated with a unique sample index as defined for the coverage mask. If the bit is set to 0, the coverage mask bit is set to 0"
                },
                {
                    "name": "AlphaToCoverageEnabled",
                    "ty": "bool",
                    "category": "Msaa",
                    "desc": "Whether a temporary coverage value is generated based on the alpha component of the fragment’s first color output"
                },
                {
                    "name": "DepthTestEnabled",
                    "ty": "bool",
                    "category": "Depth",
                    "desc": "Whether depth testing is enabled"
                },
                {
                    "name": "DepthWriteEnabled",
                    "ty": "bool",
                    "category": "Depth",
                    "desc": "Whether depth writes are enabled. Depth writes are always disabled when DepthTestEnable is false."
                },
                {
                    "name": "DepthCompareOp",
                    "ty": "VkCompareOp",
                    "category": "Depth",
                    "desc": "Comparison operator used for the depth test"
                },
                {
                    "name": "DepthBoundsTestEnabled",
                    "ty": "bool",
                    "category": "Depth",
                    "desc": "Whether depth bounds testing is enabled"
                },
                {
                    "name": "MinDepthBounds",
                    "ty": "float",
                    "category": "Depth",
                    "desc": "Minimum depth bound used in the depth bounds test"
                },
                {
                    "name": "MaxDepthBounds",
                    "ty": "float",
                    "category": "Depth",
                    "desc": "Maximum depth bound used in the depth bounds test"
                },
                {
                    "name": "StencilTestEnabled",
                    "ty": "bool",
                    "category": "Stencil",
                    "desc": "Whether stencil testing is enabled"
                },
                {
                    "name": "StencilOpStateFront",
                    "ty": "VkStencilOpState",
                    "category": "Stencil",
                    "desc": "Front parameter of the stencil test"
                },
                {
                    "name": "StencilOpStateBack",
                    "ty": "VkStencilOpState",
                    "category": "Stencil",
                    "desc": "Back parameter of the stencil test"
                },
                {
                    "name": "LogicOpEnabled",
                    "ty": "bool",
                    "category": "Color Blend",
                    "desc": "Whether to apply Logical Operations",
                    "array_dims": [
                        {
                            "name": "attachment",
                            "count": "8"
                        }
                    ]
                },
                {
                    "name": "LogicOp",
                    "ty": "VkLogicOp",
                    "category": "Color Blend",
                    "desc": "Which logical operation to apply",
                    "array_dims": [
                        {
                            "name": "attachment",
                            "count": "8"
                        }
                    ]
                },
                {
                    "name": "Attachment",
                    "ty": "VkPipelineColorBlendAttachmentState",
                    "category": "Color Blend",
                    "desc": "Per target attachment color blend states",
                    "array_dims": [
                        {
                            "name": "attachment",
                            "count": "8"
                        }
                    ]
                },
                {
                    "name": "BlendConstant",
                    "ty": "float",
                    "category": "Color Blend",
                    "desc": "A color constant used for blending",
                    "array_dims": [
                        {
                            "name": "channel",
                            "count": "4"
                        }
                    ]
                },
				{
                    "name": "LRZEnabled",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether LRZ is enabled for depth"
                },
				{
                    "name": "LRZWrite",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether LRZ write is enabled"
                },
                {
                    "name": "LRZDirStatus",
                    "ty": "a6xx_lrz_dir_status",
                    "category": "GPU-specific",
                    "desc": "LRZ direction"
                },
				{
                    "name": "LRZDirWrite",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether LRZ direction write is enabled"
                },
                {
                    "name": "ZTestMode",
                    "ty": "a6xx_ztest_mode",
                    "category": "GPU-specific",
                    "desc": "Depth test mode"
                },
                {
                    "name": "BinW",
                    "ty": "uint32_t",
                    "category": "GPU-specific",
                    "desc": "Bin width"
                },
                {
                    "name": "BinH",
                    "ty": "uint32_t",
                    "category": "GPU-specific",
                    "desc": "Bin Height"
                },
                {
                    "name": "RenderMode",
                    "ty": "a6xx_render_mode",
                    "category": "GPU-specific",
                    "desc": "Whether in binning pass or rendering pass"
                },
                {
                    "name": "BuffersLocation",
                    "ty": "a6xx_buffers_location",
                    "category": "GPU-specific",
                    "desc": "Whether the target buffer is in GMEM or SYSMEM"
                },
                {
                    "name": "ThreadSize",
                    "ty": "a6xx_threadsize",
                    "category": "GPU-specific",
                    "desc": "Whether the thread size is 64 or 128"
                },
                {
                    "name": "EnableAllHelperLanes",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether all helper lanes are enabled of the 2x2 quad for fine derivatives"
                },
				{
                    "name": "EnablePartialHelperLanes",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether 3 out of 4 helper lanes are enabled of the 2x2 quad for coarse derivatives"
                },
				{
                    "name": "UBWCEnabled",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether UBWC is enabled for this attachment",
                    "array_dims": [
                        {
                            "name": "attachment",
                            "count": "8"
                        }
                    ]
                },
				{
                    "name": "UBWCLosslessEnabled",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether UBWC Lossless compression (A7XX+) is enabled for this attachment",
                    "array_dims": [
                        {
                            "name": "attachment",
                            "count": "8"
                        }
                    ]
                },
				{
                    "name": "UBWCEnabledOnDS",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether UBWC is enabled for this depth stencil attachment"
                },
				{
                    "name": "UBWCLosslessEnabledOnDS",
                    "ty": "bool",
                    "category": "GPU-specific",
                    "desc": "Whether UBWC Lossless compression (A7XX+) is enabled for this depth stencil attachment"
                }
            ]
        }
    ]
}