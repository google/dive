/*
 Copyright 2019 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

#include "dive_strings.h"
#include <map>

#include "third_party/Vulkan-Headers/include/vulkan/vulkan_core.h"

// clang-format off
static const std::map<uint32_t, const char *> sVkFormatToString =
{
    {VK_FORMAT_UNDEFINED, "VK_FORMAT_UNDEFINED"},
    {VK_FORMAT_R4G4_UNORM_PACK8, "VK_FORMAT_R4G4_UNORM_PACK8"},
    {VK_FORMAT_R4G4B4A4_UNORM_PACK16, "VK_FORMAT_R4G4B4A4_UNORM_PACK16"},
    {VK_FORMAT_B4G4R4A4_UNORM_PACK16, "VK_FORMAT_B4G4R4A4_UNORM_PACK16"},
    {VK_FORMAT_R5G6B5_UNORM_PACK16, "VK_FORMAT_R5G6B5_UNORM_PACK16"},
    {VK_FORMAT_B5G6R5_UNORM_PACK16, "VK_FORMAT_B5G6R5_UNORM_PACK16"},
    {VK_FORMAT_R5G5B5A1_UNORM_PACK16, "VK_FORMAT_R5G5B5A1_UNORM_PACK16"},
    {VK_FORMAT_B5G5R5A1_UNORM_PACK16, "VK_FORMAT_B5G5R5A1_UNORM_PACK16"},
    {VK_FORMAT_A1R5G5B5_UNORM_PACK16, "VK_FORMAT_A1R5G5B5_UNORM_PACK16"},
    {VK_FORMAT_R8_UNORM, "VK_FORMAT_R8_UNORM"},
    {VK_FORMAT_R8_SNORM, "VK_FORMAT_R8_SNORM"},
    {VK_FORMAT_R8_USCALED, "VK_FORMAT_R8_USCALED"},
    {VK_FORMAT_R8_SSCALED, "VK_FORMAT_R8_SSCALED"},
    {VK_FORMAT_R8_UINT, "VK_FORMAT_R8_UINT"},
    {VK_FORMAT_R8_SINT, "VK_FORMAT_R8_SINT"},
    {VK_FORMAT_R8_SRGB, "VK_FORMAT_R8_SRGB"},
    {VK_FORMAT_R8G8_UNORM, "VK_FORMAT_R8G8_UNORM"},
    {VK_FORMAT_R8G8_SNORM, "VK_FORMAT_R8G8_SNORM"},
    {VK_FORMAT_R8G8_USCALED, "VK_FORMAT_R8G8_USCALED"},
    {VK_FORMAT_R8G8_SSCALED, "VK_FORMAT_R8G8_SSCALED"},
    {VK_FORMAT_R8G8_UINT, "VK_FORMAT_R8G8_UINT"},
    {VK_FORMAT_R8G8_SINT, "VK_FORMAT_R8G8_SINT"},
    {VK_FORMAT_R8G8_SRGB, "VK_FORMAT_R8G8_SRGB"},
    {VK_FORMAT_R8G8B8_UNORM, "VK_FORMAT_R8G8B8_UNORM"},
    {VK_FORMAT_R8G8B8_SNORM, "VK_FORMAT_R8G8B8_SNORM"},
    {VK_FORMAT_R8G8B8_USCALED, "VK_FORMAT_R8G8B8_USCALED"},
    {VK_FORMAT_R8G8B8_SSCALED, "VK_FORMAT_R8G8B8_SSCALED"},
    {VK_FORMAT_R8G8B8_UINT, "VK_FORMAT_R8G8B8_UINT"},
    {VK_FORMAT_R8G8B8_SINT, "VK_FORMAT_R8G8B8_SINT"},
    {VK_FORMAT_R8G8B8_SRGB, "VK_FORMAT_R8G8B8_SRGB"},
    {VK_FORMAT_B8G8R8_UNORM, "VK_FORMAT_B8G8R8_UNORM"},
    {VK_FORMAT_B8G8R8_SNORM, "VK_FORMAT_B8G8R8_SNORM"},
    {VK_FORMAT_B8G8R8_USCALED, "VK_FORMAT_B8G8R8_USCALED"},
    {VK_FORMAT_B8G8R8_SSCALED, "VK_FORMAT_B8G8R8_SSCALED"},
    {VK_FORMAT_B8G8R8_UINT, "VK_FORMAT_B8G8R8_UINT"},
    {VK_FORMAT_B8G8R8_SINT, "VK_FORMAT_B8G8R8_SINT"},
    {VK_FORMAT_B8G8R8_SRGB, "VK_FORMAT_B8G8R8_SRGB"},
    {VK_FORMAT_R8G8B8A8_UNORM, "VK_FORMAT_R8G8B8A8_UNORM"},
    {VK_FORMAT_R8G8B8A8_SNORM, "VK_FORMAT_R8G8B8A8_SNORM"},
    {VK_FORMAT_R8G8B8A8_USCALED, "VK_FORMAT_R8G8B8A8_USCALED"},
    {VK_FORMAT_R8G8B8A8_SSCALED, "VK_FORMAT_R8G8B8A8_SSCALED"},
    {VK_FORMAT_R8G8B8A8_UINT, "VK_FORMAT_R8G8B8A8_UINT"},
    {VK_FORMAT_R8G8B8A8_SINT, "VK_FORMAT_R8G8B8A8_SINT"},
    {VK_FORMAT_R8G8B8A8_SRGB, "VK_FORMAT_R8G8B8A8_SRGB"},
    {VK_FORMAT_B8G8R8A8_UNORM, "VK_FORMAT_B8G8R8A8_UNORM"},
    {VK_FORMAT_B8G8R8A8_SNORM, "VK_FORMAT_B8G8R8A8_SNORM"},
    {VK_FORMAT_B8G8R8A8_USCALED, "VK_FORMAT_B8G8R8A8_USCALED"},
    {VK_FORMAT_B8G8R8A8_SSCALED, "VK_FORMAT_B8G8R8A8_SSCALED"},
    {VK_FORMAT_B8G8R8A8_UINT, "VK_FORMAT_B8G8R8A8_UINT"},
    {VK_FORMAT_B8G8R8A8_SINT, "VK_FORMAT_B8G8R8A8_SINT"},
    {VK_FORMAT_B8G8R8A8_SRGB, "VK_FORMAT_B8G8R8A8_SRGB"},
    {VK_FORMAT_A8B8G8R8_UNORM_PACK32, "VK_FORMAT_A8B8G8R8_UNORM_PACK32"},
    {VK_FORMAT_A8B8G8R8_SNORM_PACK32, "VK_FORMAT_A8B8G8R8_SNORM_PACK32"},
    {VK_FORMAT_A8B8G8R8_USCALED_PACK32, "VK_FORMAT_A8B8G8R8_USCALED_PACK32"},
    {VK_FORMAT_A8B8G8R8_SSCALED_PACK32, "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"},
    {VK_FORMAT_A8B8G8R8_UINT_PACK32, "VK_FORMAT_A8B8G8R8_UINT_PACK32"},
    {VK_FORMAT_A8B8G8R8_SINT_PACK32, "VK_FORMAT_A8B8G8R8_SINT_PACK32"},
    {VK_FORMAT_A8B8G8R8_SRGB_PACK32, "VK_FORMAT_A8B8G8R8_SRGB_PACK32"},
    {VK_FORMAT_A2R10G10B10_UNORM_PACK32, "VK_FORMAT_A2R10G10B10_UNORM_PACK32"},
    {VK_FORMAT_A2R10G10B10_SNORM_PACK32, "VK_FORMAT_A2R10G10B10_SNORM_PACK32"},
    {VK_FORMAT_A2R10G10B10_USCALED_PACK32, "VK_FORMAT_A2R10G10B10_USCALED_PACK32"},
    {VK_FORMAT_A2R10G10B10_SSCALED_PACK32, "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"},
    {VK_FORMAT_A2R10G10B10_UINT_PACK32, "VK_FORMAT_A2R10G10B10_UINT_PACK32"},
    {VK_FORMAT_A2R10G10B10_SINT_PACK32, "VK_FORMAT_A2R10G10B10_SINT_PACK32"},
    {VK_FORMAT_A2B10G10R10_UNORM_PACK32, "VK_FORMAT_A2B10G10R10_UNORM_PACK32"},
    {VK_FORMAT_A2B10G10R10_SNORM_PACK32, "VK_FORMAT_A2B10G10R10_SNORM_PACK32"},
    {VK_FORMAT_A2B10G10R10_USCALED_PACK32, "VK_FORMAT_A2B10G10R10_USCALED_PACK32"},
    {VK_FORMAT_A2B10G10R10_SSCALED_PACK32, "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"},
    {VK_FORMAT_A2B10G10R10_UINT_PACK32, "VK_FORMAT_A2B10G10R10_UINT_PACK32"},
    {VK_FORMAT_A2B10G10R10_SINT_PACK32, "VK_FORMAT_A2B10G10R10_SINT_PACK32"},
    {VK_FORMAT_R16_UNORM, "VK_FORMAT_R16_UNORM"},
    {VK_FORMAT_R16_SNORM, "VK_FORMAT_R16_SNORM"},
    {VK_FORMAT_R16_USCALED, "VK_FORMAT_R16_USCALED"},
    {VK_FORMAT_R16_SSCALED, "VK_FORMAT_R16_SSCALED"},
    {VK_FORMAT_R16_UINT, "VK_FORMAT_R16_UINT"},
    {VK_FORMAT_R16_SINT, "VK_FORMAT_R16_SINT"},
    {VK_FORMAT_R16_SFLOAT, "VK_FORMAT_R16_SFLOAT"},
    {VK_FORMAT_R16G16_UNORM, "VK_FORMAT_R16G16_UNORM"},
    {VK_FORMAT_R16G16_SNORM, "VK_FORMAT_R16G16_SNORM"},
    {VK_FORMAT_R16G16_USCALED, "VK_FORMAT_R16G16_USCALED"},
    {VK_FORMAT_R16G16_SSCALED, "VK_FORMAT_R16G16_SSCALED"},
    {VK_FORMAT_R16G16_UINT, "VK_FORMAT_R16G16_UINT"},
    {VK_FORMAT_R16G16_SINT, "VK_FORMAT_R16G16_SINT"},
    {VK_FORMAT_R16G16_SFLOAT, "VK_FORMAT_R16G16_SFLOAT"},
    {VK_FORMAT_R16G16B16_UNORM, "VK_FORMAT_R16G16B16_UNORM"},
    {VK_FORMAT_R16G16B16_SNORM, "VK_FORMAT_R16G16B16_SNORM"},
    {VK_FORMAT_R16G16B16_USCALED, "VK_FORMAT_R16G16B16_USCALED"},
    {VK_FORMAT_R16G16B16_SSCALED, "VK_FORMAT_R16G16B16_SSCALED"},
    {VK_FORMAT_R16G16B16_UINT, "VK_FORMAT_R16G16B16_UINT"},
    {VK_FORMAT_R16G16B16_SINT, "VK_FORMAT_R16G16B16_SINT"},
    {VK_FORMAT_R16G16B16_SFLOAT, "VK_FORMAT_R16G16B16_SFLOAT"},
    {VK_FORMAT_R16G16B16A16_UNORM, "VK_FORMAT_R16G16B16A16_UNORM"},
    {VK_FORMAT_R16G16B16A16_SNORM, "VK_FORMAT_R16G16B16A16_SNORM"},
    {VK_FORMAT_R16G16B16A16_USCALED, "VK_FORMAT_R16G16B16A16_USCALED"},
    {VK_FORMAT_R16G16B16A16_SSCALED, "VK_FORMAT_R16G16B16A16_SSCALED"},
    {VK_FORMAT_R16G16B16A16_UINT, "VK_FORMAT_R16G16B16A16_UINT"},
    {VK_FORMAT_R16G16B16A16_SINT, "VK_FORMAT_R16G16B16A16_SINT"},
    {VK_FORMAT_R16G16B16A16_SFLOAT, "VK_FORMAT_R16G16B16A16_SFLOAT"},
    {VK_FORMAT_R32_UINT, "VK_FORMAT_R32_UINT"},
    {VK_FORMAT_R32_SINT, "VK_FORMAT_R32_SINT"},
    {VK_FORMAT_R32_SFLOAT, "VK_FORMAT_R32_SFLOAT"},
    {VK_FORMAT_R32G32_UINT, "VK_FORMAT_R32G32_UINT"},
    {VK_FORMAT_R32G32_SINT, "VK_FORMAT_R32G32_SINT"},
    {VK_FORMAT_R32G32_SFLOAT, "VK_FORMAT_R32G32_SFLOAT"},
    {VK_FORMAT_R32G32B32_UINT, "VK_FORMAT_R32G32B32_UINT"},
    {VK_FORMAT_R32G32B32_SINT, "VK_FORMAT_R32G32B32_SINT"},
    {VK_FORMAT_R32G32B32_SFLOAT, "VK_FORMAT_R32G32B32_SFLOAT"},
    {VK_FORMAT_R32G32B32A32_UINT, "VK_FORMAT_R32G32B32A32_UINT"},
    {VK_FORMAT_R32G32B32A32_SINT, "VK_FORMAT_R32G32B32A32_SINT"},
    {VK_FORMAT_R32G32B32A32_SFLOAT, "VK_FORMAT_R32G32B32A32_SFLOAT"},
    {VK_FORMAT_R64_UINT, "VK_FORMAT_R64_UINT"},
    {VK_FORMAT_R64_SINT, "VK_FORMAT_R64_SINT"},
    {VK_FORMAT_R64_SFLOAT, "VK_FORMAT_R64_SFLOAT"},
    {VK_FORMAT_R64G64_UINT, "VK_FORMAT_R64G64_UINT"},
    {VK_FORMAT_R64G64_SINT, "VK_FORMAT_R64G64_SINT"},
    {VK_FORMAT_R64G64_SFLOAT, "VK_FORMAT_R64G64_SFLOAT"},
    {VK_FORMAT_R64G64B64_UINT, "VK_FORMAT_R64G64B64_UINT"},
    {VK_FORMAT_R64G64B64_SINT, "VK_FORMAT_R64G64B64_SINT"},
    {VK_FORMAT_R64G64B64_SFLOAT, "VK_FORMAT_R64G64B64_SFLOAT"},
    {VK_FORMAT_R64G64B64A64_UINT, "VK_FORMAT_R64G64B64A64_UINT"},
    {VK_FORMAT_R64G64B64A64_SINT, "VK_FORMAT_R64G64B64A64_SINT"},
    {VK_FORMAT_R64G64B64A64_SFLOAT, "VK_FORMAT_R64G64B64A64_SFLOAT"},
    {VK_FORMAT_B10G11R11_UFLOAT_PACK32, "VK_FORMAT_B10G11R11_UFLOAT_PACK32"},
    {VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"},
    {VK_FORMAT_D16_UNORM, "VK_FORMAT_D16_UNORM"},
    {VK_FORMAT_X8_D24_UNORM_PACK32, "VK_FORMAT_X8_D24_UNORM_PACK32"},
    {VK_FORMAT_D32_SFLOAT, "VK_FORMAT_D32_SFLOAT"},
    {VK_FORMAT_S8_UINT, "VK_FORMAT_S8_UINT"},
    {VK_FORMAT_D16_UNORM_S8_UINT, "VK_FORMAT_D16_UNORM_S8_UINT"},
    {VK_FORMAT_D24_UNORM_S8_UINT, "VK_FORMAT_D24_UNORM_S8_UINT"},
    {VK_FORMAT_D32_SFLOAT_S8_UINT, "VK_FORMAT_D32_SFLOAT_S8_UINT"},
    {VK_FORMAT_BC1_RGB_UNORM_BLOCK, "VK_FORMAT_BC1_RGB_UNORM_BLOCK"},
    {VK_FORMAT_BC1_RGB_SRGB_BLOCK, "VK_FORMAT_BC1_RGB_SRGB_BLOCK"},
    {VK_FORMAT_BC1_RGBA_UNORM_BLOCK, "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"},
    {VK_FORMAT_BC1_RGBA_SRGB_BLOCK, "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"},
    {VK_FORMAT_BC2_UNORM_BLOCK, "VK_FORMAT_BC2_UNORM_BLOCK"},
    {VK_FORMAT_BC2_SRGB_BLOCK, "VK_FORMAT_BC2_SRGB_BLOCK"},
    {VK_FORMAT_BC3_UNORM_BLOCK, "VK_FORMAT_BC3_UNORM_BLOCK"},
    {VK_FORMAT_BC3_SRGB_BLOCK, "VK_FORMAT_BC3_SRGB_BLOCK"},
    {VK_FORMAT_BC4_UNORM_BLOCK, "VK_FORMAT_BC4_UNORM_BLOCK"},
    {VK_FORMAT_BC4_SNORM_BLOCK, "VK_FORMAT_BC4_SNORM_BLOCK"},
    {VK_FORMAT_BC5_UNORM_BLOCK, "VK_FORMAT_BC5_UNORM_BLOCK"},
    {VK_FORMAT_BC5_SNORM_BLOCK, "VK_FORMAT_BC5_SNORM_BLOCK"},
    {VK_FORMAT_BC6H_UFLOAT_BLOCK, "VK_FORMAT_BC6H_UFLOAT_BLOCK"},
    {VK_FORMAT_BC6H_SFLOAT_BLOCK, "VK_FORMAT_BC6H_SFLOAT_BLOCK"},
    {VK_FORMAT_BC7_UNORM_BLOCK, "VK_FORMAT_BC7_UNORM_BLOCK"},
    {VK_FORMAT_BC7_SRGB_BLOCK, "VK_FORMAT_BC7_SRGB_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"},
    {VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"},
    {VK_FORMAT_EAC_R11_UNORM_BLOCK, "VK_FORMAT_EAC_R11_UNORM_BLOCK"},
    {VK_FORMAT_EAC_R11_SNORM_BLOCK, "VK_FORMAT_EAC_R11_SNORM_BLOCK"},
    {VK_FORMAT_EAC_R11G11_UNORM_BLOCK, "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"},
    {VK_FORMAT_EAC_R11G11_SNORM_BLOCK, "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"},
    {VK_FORMAT_ASTC_4x4_UNORM_BLOCK, "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_4x4_SRGB_BLOCK, "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_5x4_UNORM_BLOCK, "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_5x4_SRGB_BLOCK, "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_5x5_UNORM_BLOCK, "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_5x5_SRGB_BLOCK, "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_6x5_UNORM_BLOCK, "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_6x5_SRGB_BLOCK, "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_6x6_UNORM_BLOCK, "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_6x6_SRGB_BLOCK, "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_8x5_UNORM_BLOCK, "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_8x5_SRGB_BLOCK, "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_8x6_UNORM_BLOCK, "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_8x6_SRGB_BLOCK, "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_8x8_UNORM_BLOCK, "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_8x8_SRGB_BLOCK, "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_10x5_UNORM_BLOCK, "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_10x5_SRGB_BLOCK, "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_10x6_UNORM_BLOCK, "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_10x6_SRGB_BLOCK, "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_10x8_UNORM_BLOCK, "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_10x8_SRGB_BLOCK, "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_10x10_UNORM_BLOCK, "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_10x10_SRGB_BLOCK, "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_12x10_UNORM_BLOCK, "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_12x10_SRGB_BLOCK, "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"},
    {VK_FORMAT_ASTC_12x12_UNORM_BLOCK, "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"},
    {VK_FORMAT_ASTC_12x12_SRGB_BLOCK, "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"},
    {VK_FORMAT_G8B8G8R8_422_UNORM, "VK_FORMAT_G8B8G8R8_422_UNORM"},
    {VK_FORMAT_B8G8R8G8_422_UNORM, "VK_FORMAT_B8G8R8G8_422_UNORM"},
    {VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM, "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"},
    {VK_FORMAT_G8_B8R8_2PLANE_420_UNORM, "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"},
    {VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM, "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"},
    {VK_FORMAT_G8_B8R8_2PLANE_422_UNORM, "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"},
    {VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM, "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"},
    {VK_FORMAT_R10X6_UNORM_PACK16, "VK_FORMAT_R10X6_UNORM_PACK16"},
    {VK_FORMAT_R10X6G10X6_UNORM_2PACK16, "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"},
    {VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"},
    {VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"},
    {VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"},
    {VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"},
    {VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"},
    {VK_FORMAT_R12X4_UNORM_PACK16, "VK_FORMAT_R12X4_UNORM_PACK16"},
    {VK_FORMAT_R12X4G12X4_UNORM_2PACK16, "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"},
    {VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"},
    {VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"},
    {VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"},
    {VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"},
    {VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"},
    {VK_FORMAT_G16B16G16R16_422_UNORM, "VK_FORMAT_G16B16G16R16_422_UNORM"},
    {VK_FORMAT_B16G16R16G16_422_UNORM, "VK_FORMAT_B16G16R16G16_422_UNORM"},
    {VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM, "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"},
    {VK_FORMAT_G16_B16R16_2PLANE_420_UNORM, "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"},
    {VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM, "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"},
    {VK_FORMAT_G16_B16R16_2PLANE_422_UNORM, "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"},
    {VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM, "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"},
    {VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG"},
    {VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG"},
    {VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG"},
    {VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG"},
    {VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG"},
    {VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG"},
    {VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG"},
    {VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG"},
    {VK_FORMAT_G8B8G8R8_422_UNORM_KHR, "VK_FORMAT_G8B8G8R8_422_UNORM_KHR"},
    {VK_FORMAT_B8G8R8G8_422_UNORM_KHR, "VK_FORMAT_B8G8R8G8_422_UNORM_KHR"},
    {VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR"},
    {VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR, "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR"},
    {VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR"},
    {VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR, "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR"},
    {VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR, "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR"},
    {VK_FORMAT_R10X6_UNORM_PACK16_KHR, "VK_FORMAT_R10X6_UNORM_PACK16_KHR"},
    {VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR, "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR"},
    {VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR, "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR"},
    {VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR, "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR"},
    {VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR, "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR, "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR"},
    {VK_FORMAT_R12X4_UNORM_PACK16_KHR, "VK_FORMAT_R12X4_UNORM_PACK16_KHR"},
    {VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR, "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR"},
    {VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR, "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR"},
    {VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR, "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR"},
    {VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR, "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR, "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR"},
    {VK_FORMAT_G16B16G16R16_422_UNORM_KHR, "VK_FORMAT_G16B16G16R16_422_UNORM_KHR"},
    {VK_FORMAT_B16G16R16G16_422_UNORM_KHR, "VK_FORMAT_B16G16R16G16_422_UNORM_KHR"},
    {VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR"},
    {VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR, "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR"},
    {VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR"},
    {VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR, "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR"},
    {VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR, "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR"},
    {VK_FORMAT_MAX_ENUM, "VK_FORMAT_MAX_ENUM"},
};

static const std::map<uint32_t, const char *> sVkColorSpaceKHRToString =
{
    {VK_COLOR_SPACE_SRGB_NONLINEAR_KHR, "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR"},
    {VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT, "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT"},
    {VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT, "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT"},
    {VK_COLOR_SPACE_DCI_P3_LINEAR_EXT, "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT"},
    {VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT, "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT"},
    {VK_COLOR_SPACE_BT709_LINEAR_EXT, "VK_COLOR_SPACE_BT709_LINEAR_EXT"},
    {VK_COLOR_SPACE_BT709_NONLINEAR_EXT, "VK_COLOR_SPACE_BT709_NONLINEAR_EXT"},
    {VK_COLOR_SPACE_BT2020_LINEAR_EXT, "VK_COLOR_SPACE_BT2020_LINEAR_EXT"},
    {VK_COLOR_SPACE_HDR10_ST2084_EXT, "VK_COLOR_SPACE_HDR10_ST2084_EXT"},
    {VK_COLOR_SPACE_DOLBYVISION_EXT, "VK_COLOR_SPACE_DOLBYVISION_EXT"},
    {VK_COLOR_SPACE_HDR10_HLG_EXT, "VK_COLOR_SPACE_HDR10_HLG_EXT"},
    {VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT, "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT"},
    {VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT, "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT"},
    {VK_COLOR_SPACE_PASS_THROUGH_EXT, "VK_COLOR_SPACE_PASS_THROUGH_EXT"},
    {VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT, "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT"},
    {VK_COLORSPACE_SRGB_NONLINEAR_KHR, "VK_COLORSPACE_SRGB_NONLINEAR_KHR"},
    {VK_COLOR_SPACE_MAX_ENUM_KHR, "VK_COLOR_SPACE_MAX_ENUM_KHR"}
};

const char *GetVkFormatString(uint32_t vk_format)
{
    if (sVkFormatToString.find(vk_format) == sVkFormatToString.end())
        return nullptr;
    return sVkFormatToString.find(vk_format)->second;
}

const char *GetVkColorSpaceKhrString(uint32_t vk_color_space_khr)
{
    if (sVkColorSpaceKHRToString.find(vk_color_space_khr) == sVkColorSpaceKHRToString.end())
        return nullptr;
    return sVkColorSpaceKHRToString.find(vk_color_space_khr)->second;
}

const char *GetVkImageLayoutString(uint32_t vk_image_layout)
{
    switch (vk_image_layout)
    {
    case VK_IMAGE_LAYOUT_UNDEFINED: return "UNDEFINED";
    case VK_IMAGE_LAYOUT_GENERAL: return "GENERAL";
    case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: return "COLOR_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: return "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: return "DEPTH_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: return "SHADER_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: return "TRANSFER_SRC_OPTIMAL";
    case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: return "TRANSFER_DST_OPTIMAL";
    case VK_IMAGE_LAYOUT_PREINITIALIZED: return "PREINITIALIZED";
    case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: return "DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: return "DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: return "DEPTH_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: return "DEPTH_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: return "STENCIL_ATTACHMENT_OPTIMAL";
    case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: return "STENCIL_READ_ONLY_OPTIMAL";
    case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: return "PRESENT_SRC_KHR";
    case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: return "SHARED_PRESENT_KHR";
    case VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: return "SHADING_RATE_OPTIMAL_NV";
    case VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT:
        return "FRAGMENT_DENSITY_MAP_OPTIMAL_EXT";
    }
    return nullptr;
}

const char *GetVkStencilFaceFlags(uint32_t vk_stencil_face_mask)
{
    switch (vk_stencil_face_mask)
    {
    case VK_STENCIL_FACE_FRONT_BIT: return "FRONT";
    case VK_STENCIL_FACE_BACK_BIT: return "BACK";
    case VK_STENCIL_FACE_FRONT_AND_BACK: return "FRONT_AND_BACK";
    }
    return nullptr;
}

#define AddBit(os, orig_flag, cur_flag, separator, bit, bit_string) \
    if ((cur_flag & bit) != 0)                           \
    {                                                    \
        if (cur_flag != 0 && cur_flag != orig_flag)      \
            os += separator;                                   \
        os += bit_string;                                \
        cur_flag &= ~((uint32_t)bit);                    \
    }

std::string GetVkCommandBufferUsageFlagBits(uint32_t vk_cmd_buffer_usage_flag_bits, const char *separator)
{
    std::string os;
    uint32_t orig_flag = vk_cmd_buffer_usage_flag_bits;
    uint32_t flags = vk_cmd_buffer_usage_flag_bits;
    AddBit(os, orig_flag, flags, separator, VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, "ONE_TIME_SUBMIT");
    AddBit(os, orig_flag, flags, separator, VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, "RENDER_PASS_CONTINUE");
    AddBit(os, orig_flag, flags, separator, VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, "SIMULTANEOUS_USE");
    return os;
}

std::string GetVkShaderStageBits(uint32_t vk_shader_stage_flag_bits, const char *separator)
{
    std::string os;
    uint32_t orig_flag = vk_shader_stage_flag_bits;
    uint32_t flags = vk_shader_stage_flag_bits;
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_VERTEX_BIT, "VERTEX");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT, "TESSELLATION_CONTROL");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, "TESSELLATION_EVALUATION");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_GEOMETRY_BIT, "GEOMETRY");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_FRAGMENT_BIT, "FRAGMENT");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_COMPUTE_BIT, "COMPUTE");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_ALL_GRAPHICS, "ALL_GRAPHICS");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_ALL, "ALL");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_RAYGEN_BIT_KHR, "RAYGEN_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_ANY_HIT_BIT_KHR, "ANY_HIT_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR, "CLOSEST_HIT_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_MISS_BIT_KHR, "MISS_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_INTERSECTION_BIT_KHR, "INTERSECTION_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_CALLABLE_BIT_KHR, "CALLABLE_KHR");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_TASK_BIT_NV, "TASK_NV");
    AddBit(os, orig_flag, flags, separator, VK_SHADER_STAGE_MESH_BIT_NV, "MESH_NV");
    return os;
}

std::string GetVkPipelineStageBits(uint32_t vk_pipeline_stage_flag_bits, const char *separator)
{
    std::string os;
    uint32_t orig_flag = vk_pipeline_stage_flag_bits;
    uint32_t flags = vk_pipeline_stage_flag_bits;
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, "TOP_OF_PIPE");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, "DRAW_INDIRECT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, "VERTEX_INPUT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_VERTEX_SHADER_BIT, "VERTEX_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, "TESSELLATION_CONTROL_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, "TESSELLATION_EVALUATION_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT, "GEOMETRY_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, "FRAGMENT_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, "EARLY_FRAGMENT_TESTS");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, "LATE_FRAGMENT_TESTS");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, "COLOR_ATTACHMENT_OUTPUT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, "COMPUTE_SHADER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TRANSFER_BIT, "TRANSFER");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, "BOTTOM_OF_PIPE");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_HOST_BIT, "HOST");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, "ALL_GRAPHICS");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, "ALL_COMMANDS");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT, "TRANSFORM_FEEDBACK_EXT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT, "CONDITIONAL_RENDERING_EXT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR, "RAY_TRACING_SHADER_KHR");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR, "ACCELERATION_STRUCTURE_BUILD_KHR");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV, "SHADING_RATE_IMAGE_NV");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV, "TASK_SHADER_NV");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV, "MESH_SHADER_NV");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT, "FRAGMENT_DENSITY_PROCESS_EXT");
    AddBit(os, orig_flag, flags, separator, VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV, "COMMAND_PREPROCESS_NV");
    return os;
}

std::string GetVkQueryResultFlagBits(uint32_t vk_query_result_flag_bits, const char *separator)
{
    std::string os;
    uint32_t orig_flag = vk_query_result_flag_bits;
    uint32_t flags = vk_query_result_flag_bits;
    AddBit(os, orig_flag, flags, separator, VK_QUERY_RESULT_64_BIT, "64");
    AddBit(os, orig_flag, flags, separator, VK_QUERY_RESULT_WAIT_BIT, "WAIT");
    AddBit(os, orig_flag, flags, separator, VK_QUERY_RESULT_WITH_AVAILABILITY_BIT, "WITH_AVAILABILITY");
    AddBit(os, orig_flag, flags, separator, VK_QUERY_RESULT_PARTIAL_BIT, "PARTIAL");
    return os;
}

const char *GetVkPrimitiveTopology(VkPrimitiveTopology vk_primitive_topology)
{
    switch (vk_primitive_topology)
    {
    case VK_PRIMITIVE_TOPOLOGY_POINT_LIST: return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
    case VK_PRIMITIVE_TOPOLOGY_LINE_LIST: return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
    case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
    case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
        return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
    case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
    case VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: return "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkPolygonMode(VkPolygonMode vk_polygon_mode)
{
    switch (vk_polygon_mode)
    {
    case VK_POLYGON_MODE_FILL: return "VK_POLYGON_MODE_FILL";
    case VK_POLYGON_MODE_LINE: return "VK_POLYGON_MODE_LINE";
    case VK_POLYGON_MODE_POINT: return "VK_POLYGON_MODE_POINT";
    case VK_POLYGON_MODE_FILL_RECTANGLE_NV: return "VK_POLYGON_MODE_FILL_RECTANGLE_NV";
    case VK_POLYGON_MODE_MAX_ENUM: return "VK_POLYGON_MODE_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkCullModeFlags(VkCullModeFlags vk_cull_mode_flags)
{
    switch (vk_cull_mode_flags)
    {
    case VK_CULL_MODE_NONE: return "VK_CULL_MODE_NONE";
    case VK_CULL_MODE_FRONT_BIT: return "VK_CULL_MODE_FRONT_BIT";
    case VK_CULL_MODE_BACK_BIT: return "VK_CULL_MODE_BACK_BIT";
    case VK_CULL_MODE_FRONT_AND_BACK: return "VK_CULL_MODE_FRONT_AND_BACK";
    case VK_CULL_MODE_FLAG_BITS_MAX_ENUM: return "VK_CULL_MODE_FLAG_BITS_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkFrontFace(VkFrontFace vk_front_face)
{
    switch (vk_front_face)
    {
    case VK_FRONT_FACE_COUNTER_CLOCKWISE: return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
    case VK_FRONT_FACE_CLOCKWISE: return "VK_FRONT_FACE_CLOCKWISE";
    case VK_FRONT_FACE_MAX_ENUM: return "VK_FRONT_FACE_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkCompareOp(VkCompareOp vk_compare_op)
{
    switch (vk_compare_op)
    {
    case VK_COMPARE_OP_NEVER: return "VK_COMPARE_OP_NEVER";
    case VK_COMPARE_OP_LESS: return "VK_COMPARE_OP_LESS";
    case VK_COMPARE_OP_EQUAL: return "VK_COMPARE_OP_EQUAL";
    case VK_COMPARE_OP_LESS_OR_EQUAL: return "VK_COMPARE_OP_LESS_OR_EQUAL";
    case VK_COMPARE_OP_GREATER: return "VK_COMPARE_OP_GREATER";
    case VK_COMPARE_OP_NOT_EQUAL: return "VK_COMPARE_OP_NOT_EQUAL";
    case VK_COMPARE_OP_GREATER_OR_EQUAL: return "VK_COMPARE_OP_GREATER_OR_EQUAL";
    case VK_COMPARE_OP_ALWAYS: return "VK_COMPARE_OP_ALWAYS";
    case VK_COMPARE_OP_MAX_ENUM: return "VK_COMPARE_OP_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkStencilOp(VkStencilOp vk_stencil_op)
{
    switch (vk_stencil_op)
    {
    case VK_STENCIL_OP_KEEP: return "VK_STENCIL_OP_KEEP";
    case VK_STENCIL_OP_ZERO: return "VK_STENCIL_OP_ZERO";
    case VK_STENCIL_OP_REPLACE: return "VK_STENCIL_OP_REPLACE";
    case VK_STENCIL_OP_INCREMENT_AND_CLAMP: return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
    case VK_STENCIL_OP_DECREMENT_AND_CLAMP: return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
    case VK_STENCIL_OP_INVERT: return "VK_STENCIL_OP_INVERT";
    case VK_STENCIL_OP_INCREMENT_AND_WRAP: return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
    case VK_STENCIL_OP_DECREMENT_AND_WRAP: return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
    case VK_STENCIL_OP_MAX_ENUM: return "VK_STENCIL_OP_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkSampleCountFlags(VkSampleCountFlags vk_sample_count_flag)
{
    switch (vk_sample_count_flag)
    {
    case VK_SAMPLE_COUNT_1_BIT: return "VK_SAMPLE_COUNT_1_BIT";
    case VK_SAMPLE_COUNT_2_BIT: return "VK_SAMPLE_COUNT_2_BIT";
    case VK_SAMPLE_COUNT_4_BIT: return "VK_SAMPLE_COUNT_4_BIT";
    case VK_SAMPLE_COUNT_8_BIT: return "VK_SAMPLE_COUNT_8_BIT";
    case VK_SAMPLE_COUNT_16_BIT: return "VK_SAMPLE_COUNT_16_BIT";
    case VK_SAMPLE_COUNT_32_BIT: return "VK_SAMPLE_COUNT_32_BIT";
    case VK_SAMPLE_COUNT_64_BIT: return "VK_SAMPLE_COUNT_64_BIT";
    case VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: return "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM";
    }
    return nullptr;
}

const char *GetZFormat(Dive::Legacy::ZFormat z_format)
{
    switch (z_format)
    {
    case Dive::Legacy::Z_INVALID: return "Z_INVALID";
    case Dive::Legacy::Z_16: return "Z_16";
    case Dive::Legacy::Z_24: return "Z_24";
    case Dive::Legacy::Z_32_FLOAT: return "Z_32_FLOAT";
    }
    return nullptr;
}

const char *GetZOrder(Dive::Legacy::ZOrder z_order)
{
    switch (z_order)
    {
    case Dive::Legacy::LATE_Z: return "LATE_Z";
    case Dive::Legacy::EARLY_Z_THEN_LATE_Z: return "EARLY_Z_THEN_LATE_Z";
    case Dive::Legacy::RE_Z: return "RE_Z";
    case Dive::Legacy::EARLY_Z_THEN_RE_Z: return "EARLY_Z_THEN_RE_Z";
    }
    return nullptr;
}

const char *GetColorFormat(Dive::Legacy::ColorFormat color_format)
{
    switch (color_format)
    {
    case Dive::Legacy::COLOR_INVALID: return "COLOR_INVALID";
    case Dive::Legacy::COLOR_8: return "COLOR_8";
    case Dive::Legacy::COLOR_16: return "COLOR_16";
    case Dive::Legacy::COLOR_8_8: return "COLOR_8_8";
    case Dive::Legacy::COLOR_32: return "COLOR_32";
    case Dive::Legacy::COLOR_16_16: return "COLOR_16_16";
    case Dive::Legacy::COLOR_10_11_11: return "COLOR_10_11_11";
    case Dive::Legacy::COLOR_11_11_10: return "COLOR_11_11_10";
    case Dive::Legacy::COLOR_10_10_10_2: return "COLOR_10_10_10_2";
    case Dive::Legacy::COLOR_2_10_10_10: return "COLOR_2_10_10_10";
    case Dive::Legacy::COLOR_8_8_8_8: return "COLOR_8_8_8_8";
    case Dive::Legacy::COLOR_32_32: return "COLOR_32_32";
    case Dive::Legacy::COLOR_16_16_16_16: return "COLOR_16_16_16_16";
    case Dive::Legacy::COLOR_RESERVED_13: return "COLOR_RESERVED_13";
    case Dive::Legacy::COLOR_32_32_32_32: return "COLOR_32_32_32_32";
    case Dive::Legacy::COLOR_RESERVED_15: return "COLOR_RESERVED_15";
    case Dive::Legacy::COLOR_5_6_5: return "COLOR_5_6_5";
    case Dive::Legacy::COLOR_1_5_5_5: return "COLOR_1_5_5_5";
    case Dive::Legacy::COLOR_5_5_5_1: return "COLOR_5_5_5_1";
    case Dive::Legacy::COLOR_4_4_4_4: return "COLOR_4_4_4_4";
    case Dive::Legacy::COLOR_8_24: return "COLOR_8_24";
    case Dive::Legacy::COLOR_24_8: return "COLOR_24_8";
    case Dive::Legacy::COLOR_X24_8_32_FLOAT: return "COLOR_X24_8_32_FLOAT";
    case Dive::Legacy::COLOR_RESERVED_23: return "COLOR_RESERVED_23";
    case Dive::Legacy::COLOR_RESERVED_25: return "COLOR_RESERVED_25";
    case Dive::Legacy::COLOR_RESERVED_26: return "COLOR_RESERVED_26";
    case Dive::Legacy::COLOR_RESERVED_27: return "COLOR_RESERVED_27";
    case Dive::Legacy::COLOR_RESERVED_28: return "COLOR_RESERVED_28";
    case Dive::Legacy::COLOR_RESERVED_29: return "COLOR_RESERVED_29";
    case Dive::Legacy::COLOR_2_10_10_10_6E4: return "COLOR_2_10_10_10_6E4";
    case Dive::Legacy::COLOR_RESERVED_24__GFX09: return "COLOR_RESERVED_24__GFX09";
    case Dive::Legacy::COLOR_RESERVED_30__GFX09: return "COLOR_RESERVED_30__GFX09";
    }
    return nullptr;
}

const char *GetVkLogicOp(VkLogicOp vk_logic_op)
{
    switch (vk_logic_op)
    {
    case VK_LOGIC_OP_CLEAR: return "VK_LOGIC_OP_CLEAR";
    case VK_LOGIC_OP_AND: return "VK_LOGIC_OP_AND";
    case VK_LOGIC_OP_AND_REVERSE: return "VK_LOGIC_OP_AND_REVERSE";
    case VK_LOGIC_OP_COPY: return "VK_LOGIC_OP_COPY";
    case VK_LOGIC_OP_AND_INVERTED: return "VK_LOGIC_OP_AND_INVERTED";
    case VK_LOGIC_OP_NO_OP: return "VK_LOGIC_OP_NO_OP";
    case VK_LOGIC_OP_XOR: return "VK_LOGIC_OP_XOR";
    case VK_LOGIC_OP_OR: return "VK_LOGIC_OP_OR";
    case VK_LOGIC_OP_NOR: return "VK_LOGIC_OP_NOR";
    case VK_LOGIC_OP_EQUIVALENT: return "VK_LOGIC_OP_EQUIVALENT";
    case VK_LOGIC_OP_INVERT: return "VK_LOGIC_OP_INVERT";
    case VK_LOGIC_OP_OR_REVERSE: return "VK_LOGIC_OP_OR_REVERSE";
    case VK_LOGIC_OP_COPY_INVERTED: return "VK_LOGIC_OP_COPY_INVERTED";
    case VK_LOGIC_OP_OR_INVERTED: return "VK_LOGIC_OP_OR_INVERTED";
    case VK_LOGIC_OP_NAND: return "VK_LOGIC_OP_NAND";
    case VK_LOGIC_OP_SET: return "VK_LOGIC_OP_SET";
    case VK_LOGIC_OP_MAX_ENUM: return "VK_LOGIC_OP_MAX_ENUM";
    }
    return nullptr;
}

const char *GetVkBlendFactor(VkBlendFactor vk_blend_factor)
{
    switch (vk_blend_factor)
    {
    case VK_BLEND_FACTOR_ZERO: return "VK_BLEND_FACTOR_ZERO";
    case VK_BLEND_FACTOR_ONE: return "VK_BLEND_FACTOR_ONE";
    case VK_BLEND_FACTOR_SRC_COLOR: return "VK_BLEND_FACTOR_SRC_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
    case VK_BLEND_FACTOR_SRC_ALPHA: return "VK_BLEND_FACTOR_SRC_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
    case VK_BLEND_FACTOR_DST_ALPHA: return "VK_BLEND_FACTOR_DST_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
    case VK_BLEND_FACTOR_DST_COLOR: return "VK_BLEND_FACTOR_DST_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
    case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
    case VK_BLEND_FACTOR_MAX_ENUM: return "VK_BLEND_FACTOR_MAX_ENUM";
    case VK_BLEND_FACTOR_CONSTANT_COLOR: return "VK_BLEND_FACTOR_CONSTANT_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
        return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
    case VK_BLEND_FACTOR_SRC1_COLOR: return "VK_BLEND_FACTOR_SRC1_COLOR";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
    case VK_BLEND_FACTOR_SRC1_ALPHA: return "VK_BLEND_FACTOR_SRC1_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
    case VK_BLEND_FACTOR_CONSTANT_ALPHA: return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
    case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
        return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
    }
    return nullptr;
}

const char *GetVkBlendOp(VkBlendOp vk_blend_op)
{
    switch (vk_blend_op)
    {
    case VK_BLEND_OP_ADD: return "VK_BLEND_OP_ADD";
    case VK_BLEND_OP_SUBTRACT: return "VK_BLEND_OP_SUBTRACT";
    case VK_BLEND_OP_MIN: return "VK_BLEND_OP_MIN";
    case VK_BLEND_OP_MAX: return "VK_BLEND_OP_MAX";
    case VK_BLEND_OP_REVERSE_SUBTRACT: return "VK_BLEND_OP_REVERSE_SUBTRACT";
    default: return nullptr;
    }
}
// clang-format on