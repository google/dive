<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2020 Google LLC

 Licensed under the Apache License, Version 2.0 (the \"License\";
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--

 WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!

 This code has been generated automatically by generateSOAs.py. Do not hand-modify this code.

-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <!-- EventStateInfo -->
    <Type Name="Dive::EventStateInfo">
        <DisplayString>{{ size={m_size} }}</DisplayString>
        <Expand>
            <Item Name="[size]">m_size</Item>
            <Item Name="[capacity]">m_cap</Item>
            <Synthetic Name="Topology" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint32_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kTopologyOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="PrimRestartEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kPrimRestartEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="PatchControlPoints" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint32_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kPatchControlPointsOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Viewport" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 16</Size>
                        <ValuePointer>((VkViewport*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kViewportOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Scissor" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 16</Size>
                        <ValuePointer>((VkRect2D*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kScissorOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthClampEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthClampEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="RasterizerDiscardEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizerDiscardEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="PolygonMode" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkPolygonMode*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kPolygonModeOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="CullMode" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkCullModeFlags*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kCullModeOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="FrontFace" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkFrontFace*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kFrontFaceOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthBiasEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthBiasConstantFactor" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasConstantFactorOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthBiasClamp" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasClampOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthBiasSlopeFactor" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasSlopeFactorOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LineWidth" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLineWidthOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="RasterizationSamples" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkSampleCountFlagBits*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizationSamplesOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="SampleShadingEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kSampleShadingEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="MinSampleShading" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kMinSampleShadingOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="SampleMask" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkSampleMask*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kSampleMaskOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="AlphaToCoverageEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kAlphaToCoverageEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthTestEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthTestEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthWriteEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthWriteEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthCompareOp" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkCompareOp*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthCompareOpOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="DepthBoundsTestEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBoundsTestEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="MinDepthBounds" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kMinDepthBoundsOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="MaxDepthBounds" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kMaxDepthBoundsOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="StencilTestEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kStencilTestEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="StencilOpStateFront" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkStencilOpState*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateFrontOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="StencilOpStateBack" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((VkStencilOpState*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateBackOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOpEnabled" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOp" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 8</Size>
                        <ValuePointer>((VkLogicOp*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Attachment" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 8</Size>
                        <ValuePointer>((VkPipelineColorBlendAttachmentState*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kAttachmentOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BlendConstant" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 4</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kBlendConstantOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LRZEnabled" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLRZEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LRZWrite" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLRZWriteOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LRZDirStatus" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((a6xx_lrz_dir_status*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirStatusOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LRZDirWrite" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirWriteOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="ZTestMode" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((a6xx_ztest_mode*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kZTestModeOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BinW" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint32_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kBinWOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BinH" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint32_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kBinHOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="WindowScissorTLX" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint16_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLXOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="WindowScissorTLY" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint16_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLYOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="WindowScissorBRX" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint16_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRXOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="WindowScissorBRY" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((uint16_t*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRYOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="RenderMode" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((a6xx_render_mode*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kRenderModeOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BuffersLocation" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((a6xx_buffers_location*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kBuffersLocationOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="ThreadSize" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((a6xx_threadsize*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kThreadSizeOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="EnableAllHelperLanes" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kEnableAllHelperLanesOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="EnablePartialHelperLanes" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kEnablePartialHelperLanesOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCEnabled" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabled" >
                <Expand>
                    <ArrayItems>
                            <Direction>Forward</Direction>
                            <Rank>2</Rank>
                            <Size>$i == 0 ? m_size : 8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCEnabledOnDS" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOnDSOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabledOnDS" >
                <Expand>
                    <ArrayItems>
                            <Size>m_size</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOnDSOffset * m_cap))</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
        </Expand>
    </Type>
    <Type Name="Dive::EventStateInfoRef">
        <DisplayString>{{ id={m_id.m_id} }}</DisplayString>
<Expand>
    <Item Name="[id]">m_id.m_id</Item>
    <Item Name="[obj]">*m_obj_ptr</Item>
            <Item Name="Topology" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    (VkPrimitiveTopology)(((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kTopologyOffset * m_obj_ptr->m_cap))[m_id.m_id])
            </Item>
            <Item Name="PrimRestartEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPrimRestartEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PatchControlPoints" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPatchControlPointsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="Viewport" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkViewport*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kViewportOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kViewportArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Scissor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkRect2D*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kScissorOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kScissorArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="DepthClampEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthClampEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizerDiscardEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizerDiscardEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PolygonMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkPolygonMode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPolygonModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="CullMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCullModeFlags*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kCullModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="FrontFace" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkFrontFace*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kFrontFaceOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasConstantFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasConstantFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasClamp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasClampOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasSlopeFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasSlopeFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LineWidth" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLineWidthOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizationSamples" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleCountFlagBits*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizationSamplesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleShadingEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleShadingEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinSampleShading" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinSampleShadingOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleMask" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleMask*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleMaskOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="AlphaToCoverageEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAlphaToCoverageEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthWriteEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthWriteEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthCompareOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCompareOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthCompareOpOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBoundsTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBoundsTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MaxDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMaxDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateFront" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateFrontOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateBack" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateBackOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="LogicOpEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkLogicOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Attachment" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkPipelineColorBlendAttachmentState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAttachmentOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kAttachmentArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BlendConstant" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>4</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBlendConstantOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kBlendConstantArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="LRZEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirStatus" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_lrz_dir_status*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirStatusOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ZTestMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_ztest_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kZTestModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinW" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinWOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinH" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinHOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RenderMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_render_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRenderModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BuffersLocation" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_buffers_location*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBuffersLocationOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ThreadSize" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_threadsize*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kThreadSizeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnableAllHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnableAllHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnablePartialHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnablePartialHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="UBWCEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCLosslessEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="UBWCEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="UBWCLosslessEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
</Expand>

    </Type>
    <Type Name="Dive::EventStateInfoConstRef">
        <DisplayString>{{ id={m_id.m_id} }}</DisplayString>
<Expand>
    <Item Name="[id]">m_id.m_id</Item>
    <Item Name="[obj]">*m_obj_ptr</Item>
            <Item Name="Topology" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    (VkPrimitiveTopology)(((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kTopologyOffset * m_obj_ptr->m_cap))[m_id.m_id])
            </Item>
            <Item Name="PrimRestartEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPrimRestartEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PatchControlPoints" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPatchControlPointsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="Viewport" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkViewport*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kViewportOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kViewportArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Scissor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkRect2D*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kScissorOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kScissorArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="DepthClampEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthClampEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizerDiscardEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizerDiscardEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PolygonMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkPolygonMode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPolygonModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="CullMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCullModeFlags*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kCullModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="FrontFace" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkFrontFace*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kFrontFaceOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasConstantFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasConstantFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasClamp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasClampOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasSlopeFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasSlopeFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LineWidth" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLineWidthOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizationSamples" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleCountFlagBits*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizationSamplesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleShadingEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleShadingEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinSampleShading" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinSampleShadingOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleMask" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleMask*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleMaskOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="AlphaToCoverageEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAlphaToCoverageEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthWriteEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthWriteEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthCompareOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCompareOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthCompareOpOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBoundsTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBoundsTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MaxDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMaxDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateFront" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateFrontOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateBack" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateBackOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="LogicOpEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkLogicOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Attachment" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkPipelineColorBlendAttachmentState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAttachmentOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kAttachmentArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BlendConstant" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>4</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBlendConstantOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kBlendConstantArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="LRZEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirStatus" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_lrz_dir_status*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirStatusOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ZTestMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_ztest_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kZTestModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinW" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinWOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinH" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinHOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RenderMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_render_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRenderModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BuffersLocation" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_buffers_location*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBuffersLocationOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ThreadSize" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_threadsize*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kThreadSizeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnableAllHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnableAllHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnablePartialHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnablePartialHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="UBWCEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCLosslessEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="UBWCEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="UBWCLosslessEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
</Expand>

    </Type>
    <Type Name="Dive::EventStateInfo::Iterator">
        <DisplayString>{{ id={m_id.m_id} }}</DisplayString>
<Expand>
    <Item Name="[id]">m_id.m_id</Item>
    <Item Name="[obj]">*m_obj_ptr</Item>
            <Item Name="Topology" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    (VkPrimitiveTopology)(((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kTopologyOffset * m_obj_ptr->m_cap))[m_id.m_id])
            </Item>
            <Item Name="PrimRestartEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPrimRestartEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PatchControlPoints" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPatchControlPointsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="Viewport" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkViewport*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kViewportOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kViewportArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Scissor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkRect2D*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kScissorOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kScissorArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="DepthClampEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthClampEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizerDiscardEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizerDiscardEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PolygonMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkPolygonMode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPolygonModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="CullMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCullModeFlags*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kCullModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="FrontFace" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkFrontFace*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kFrontFaceOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasConstantFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasConstantFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasClamp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasClampOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasSlopeFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasSlopeFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LineWidth" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLineWidthOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizationSamples" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleCountFlagBits*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizationSamplesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleShadingEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleShadingEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinSampleShading" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinSampleShadingOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleMask" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleMask*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleMaskOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="AlphaToCoverageEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAlphaToCoverageEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthWriteEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthWriteEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthCompareOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCompareOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthCompareOpOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBoundsTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBoundsTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MaxDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMaxDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateFront" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateFrontOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateBack" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateBackOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="LogicOpEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkLogicOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Attachment" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkPipelineColorBlendAttachmentState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAttachmentOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kAttachmentArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BlendConstant" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>4</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBlendConstantOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kBlendConstantArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="LRZEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirStatus" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_lrz_dir_status*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirStatusOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ZTestMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_ztest_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kZTestModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinW" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinWOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinH" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinHOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RenderMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_render_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRenderModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BuffersLocation" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_buffers_location*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBuffersLocationOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ThreadSize" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_threadsize*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kThreadSizeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnableAllHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnableAllHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnablePartialHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnablePartialHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="UBWCEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCLosslessEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="UBWCEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="UBWCLosslessEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
</Expand>

    </Type>
    <Type Name="Dive::EventStateInfo::ConstIterator">
        <DisplayString>{{ id={m_id.m_id} }}</DisplayString>
<Expand>
    <Item Name="[id]">m_id.m_id</Item>
    <Item Name="[obj]">*m_obj_ptr</Item>
            <Item Name="Topology" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    (VkPrimitiveTopology)(((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kTopologyOffset * m_obj_ptr->m_cap))[m_id.m_id])
            </Item>
            <Item Name="PrimRestartEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPrimRestartEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PatchControlPoints" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPatchControlPointsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="Viewport" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkViewport*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kViewportOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kViewportArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Scissor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>16</Size>
                        <ValuePointer>((VkRect2D*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kScissorOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kScissorArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="DepthClampEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthClampEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizerDiscardEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizerDiscardEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="PolygonMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkPolygonMode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kPolygonModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="CullMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCullModeFlags*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kCullModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="FrontFace" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkFrontFace*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kFrontFaceOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasConstantFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasConstantFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasClamp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasClampOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBiasSlopeFactor" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBiasSlopeFactorOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LineWidth" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLineWidthOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RasterizationSamples" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleCountFlagBits*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRasterizationSamplesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleShadingEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleShadingEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinSampleShading" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinSampleShadingOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="SampleMask" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkSampleMask*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kSampleMaskOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="AlphaToCoverageEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAlphaToCoverageEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthWriteEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthWriteEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthCompareOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkCompareOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthCompareOpOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="DepthBoundsTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kDepthBoundsTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MinDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMinDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="MaxDepthBounds" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kMaxDepthBoundsOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilTestEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilTestEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateFront" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateFrontOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="StencilOpStateBack" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((VkStencilOpState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kStencilOpStateBackOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="LogicOpEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="LogicOp" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkLogicOp*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLogicOpOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kLogicOpArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="Attachment" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((VkPipelineColorBlendAttachmentState*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kAttachmentOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kAttachmentArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="BlendConstant" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>4</Size>
                        <ValuePointer>((float*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBlendConstantOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kBlendConstantArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="LRZEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZEnabledOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirStatus" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_lrz_dir_status*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirStatusOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="LRZDirWrite" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kLRZDirWriteOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ZTestMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_ztest_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kZTestModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinW" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinWOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BinH" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint32_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBinHOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorTLY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorTLYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRX" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRXOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="WindowScissorBRY" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((uint16_t*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kWindowScissorBRYOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="RenderMode" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_render_mode*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kRenderModeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="BuffersLocation" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_buffers_location*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kBuffersLocationOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="ThreadSize" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((a6xx_threadsize*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kThreadSizeOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnableAllHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnableAllHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="EnablePartialHelperLanes" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kEnablePartialHelperLanesOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Synthetic Name="UBWCEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Synthetic Name="UBWCLosslessEnabled" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                <Expand>
                    <ArrayItems>
                        <Direction>Forward</Direction>
                        <Rank>1</Rank>
                        <Size>8</Size>
                        <ValuePointer>((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOffset * m_obj_ptr->m_cap)) + m_id.m_id * EventStateInfo::kUBWCLosslessEnabledArrayCount</ValuePointer>
                    </ArrayItems>
                </Expand>
            </Synthetic>
            <Item Name="UBWCEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
            <Item Name="UBWCLosslessEnabledOnDS" Condition="!(m_obj_ptr == 0 || m_id.m_id >= m_obj_ptr->m_size)" >
                    ((bool*)(((uint8_t*)m_obj_ptr->m_buffer._Mypair._Myval2) + EventStateInfo::kUBWCLosslessEnabledOnDSOffset * m_obj_ptr->m_cap))[m_id.m_id]
            </Item>
</Expand>

    </Type>
</AutoVisualizer>
